// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package msgflatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ForwardedMetadata struct {
	_tab flatbuffers.Table
}

func GetRootAsForwardedMetadata(buf []byte, offset flatbuffers.UOffsetT) *ForwardedMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ForwardedMetadata{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ForwardedMetadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ForwardedMetadata) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ForwardedMetadata) Pipeline(obj *Pipeline) *Pipeline {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Pipeline)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ForwardedMetadata) StoragePolicy(obj *StoragePolicy) *StoragePolicy {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(StoragePolicy)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ForwardedMetadata) AggregationId(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ForwardedMetadata) AggregationIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ForwardedMetadata) MutateAggregationId(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *ForwardedMetadata) NumForwardedTimes() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ForwardedMetadata) MutateNumForwardedTimes(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *ForwardedMetadata) SourceId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ForwardedMetadata) MutateSourceId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *ForwardedMetadata) ResendEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ForwardedMetadata) MutateResendEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func ForwardedMetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ForwardedMetadataAddPipeline(builder *flatbuffers.Builder, pipeline flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(pipeline), 0)
}
func ForwardedMetadataAddStoragePolicy(builder *flatbuffers.Builder, storagePolicy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(storagePolicy), 0)
}
func ForwardedMetadataAddAggregationId(builder *flatbuffers.Builder, aggregationId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(aggregationId), 0)
}
func ForwardedMetadataStartAggregationIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ForwardedMetadataAddNumForwardedTimes(builder *flatbuffers.Builder, numForwardedTimes int32) {
	builder.PrependInt32Slot(3, numForwardedTimes, 0)
}
func ForwardedMetadataAddSourceId(builder *flatbuffers.Builder, sourceId uint32) {
	builder.PrependUint32Slot(4, sourceId, 0)
}
func ForwardedMetadataAddResendEnabled(builder *flatbuffers.Builder, resendEnabled bool) {
	builder.PrependBoolSlot(5, resendEnabled, false)
}
func ForwardedMetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
