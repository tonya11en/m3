// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package msgflatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StoragePolicy struct {
	_tab flatbuffers.Table
}

func GetRootAsStoragePolicy(buf []byte, offset flatbuffers.UOffsetT) *StoragePolicy {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StoragePolicy{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *StoragePolicy) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StoragePolicy) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StoragePolicy) Resolution(obj *Resolution) *Resolution {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Resolution)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *StoragePolicy) Retention() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StoragePolicy) MutateRetention(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func StoragePolicyStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func StoragePolicyAddResolution(builder *flatbuffers.Builder, resolution flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(resolution), 0)
}
func StoragePolicyAddRetention(builder *flatbuffers.Builder, retention int64) {
	builder.PrependInt64Slot(1, retention, 0)
}
func StoragePolicyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
