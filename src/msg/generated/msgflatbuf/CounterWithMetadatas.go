// Code generated by the FlatBuffers compiler. DO NOT EDIT.

// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package msgflatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CounterWithMetadatas struct {
	_tab flatbuffers.Table
}

func GetRootAsCounterWithMetadatas(buf []byte, offset flatbuffers.UOffsetT) *CounterWithMetadatas {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CounterWithMetadatas{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CounterWithMetadatas) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CounterWithMetadatas) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CounterWithMetadatas) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CounterWithMetadatas) Annotation(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *CounterWithMetadatas) AnnotationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CounterWithMetadatas) MutateAnnotation(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *CounterWithMetadatas) Value() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CounterWithMetadatas) MutateValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *CounterWithMetadatas) ClientTimeNanos() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CounterWithMetadatas) MutateClientTimeNanos(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *CounterWithMetadatas) Metadatas(obj *StagedMetadata, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *CounterWithMetadatas) MetadatasLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func CounterWithMetadatasStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func CounterWithMetadatasAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func CounterWithMetadatasAddAnnotation(builder *flatbuffers.Builder, annotation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(annotation), 0)
}
func CounterWithMetadatasStartAnnotationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func CounterWithMetadatasAddValue(builder *flatbuffers.Builder, value int64) {
	builder.PrependInt64Slot(2, value, 0)
}
func CounterWithMetadatasAddClientTimeNanos(builder *flatbuffers.Builder, clientTimeNanos int64) {
	builder.PrependInt64Slot(3, clientTimeNanos, 0)
}
func CounterWithMetadatasAddMetadatas(builder *flatbuffers.Builder, metadatas flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(metadatas), 0)
}
func CounterWithMetadatasStartMetadatasVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CounterWithMetadatasEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
