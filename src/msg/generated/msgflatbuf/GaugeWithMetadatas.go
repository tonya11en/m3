// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package msgflatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GaugeWithMetadatas struct {
	_tab flatbuffers.Table
}

func GetRootAsGaugeWithMetadatas(buf []byte, offset flatbuffers.UOffsetT) *GaugeWithMetadatas {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GaugeWithMetadatas{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GaugeWithMetadatas) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GaugeWithMetadatas) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GaugeWithMetadatas) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GaugeWithMetadatas) Annotation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GaugeWithMetadatas) Value() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GaugeWithMetadatas) MutateValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *GaugeWithMetadatas) ClientTimeNanos() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GaugeWithMetadatas) MutateClientTimeNanos(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *GaugeWithMetadatas) Metadatas(obj *StagedMetadata, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GaugeWithMetadatas) MetadatasLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func GaugeWithMetadatasStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func GaugeWithMetadatasAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func GaugeWithMetadatasAddAnnotation(builder *flatbuffers.Builder, annotation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(annotation), 0)
}
func GaugeWithMetadatasAddValue(builder *flatbuffers.Builder, value float64) {
	builder.PrependFloat64Slot(2, value, 0.0)
}
func GaugeWithMetadatasAddClientTimeNanos(builder *flatbuffers.Builder, clientTimeNanos int64) {
	builder.PrependInt64Slot(3, clientTimeNanos, 0)
}
func GaugeWithMetadatasAddMetadatas(builder *flatbuffers.Builder, metadatas flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(metadatas), 0)
}
func GaugeWithMetadatasStartMetadatasVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GaugeWithMetadatasEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
