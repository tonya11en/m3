// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: msg

package msgflatbuf

import "github.com/google/flatbuffers/go"

import (
  context "context"
  grpc "google.golang.org/grpc"
)

// Client API for MessageWriter service
type MessageWriterClient interface{
  WriteMessage(ctx context.Context, 
  	opts... grpc.CallOption) (MessageWriter_WriteMessageClient, error)  
}

type messageWriterClient struct {
  cc *grpc.ClientConn
}

func NewMessageWriterClient(cc *grpc.ClientConn) MessageWriterClient {
  return &messageWriterClient{cc}
}

func (c *messageWriterClient) WriteMessage(ctx context.Context, 
	opts... grpc.CallOption) (MessageWriter_WriteMessageClient, error) {
  stream, err := grpc.NewClientStream(ctx, &_MessageWriter_serviceDesc.Streams[0], c.cc, "/msgflatbuf.MessageWriter/WriteMessage", opts...)
  if err != nil { return nil, err }
  x := &messageWriterWriteMessageClient{stream}
  return x,nil
}

type MessageWriter_WriteMessageClient interface {
  Send(*flatbuffers.Builder) error
  Recv() (*Ack, error)
  grpc.ClientStream
}

type messageWriterWriteMessageClient struct{
  grpc.ClientStream
}

func (x *messageWriterWriteMessageClient) Send(m *flatbuffers.Builder) error {
  return x.ClientStream.SendMsg(m)
}

func (x *messageWriterWriteMessageClient) Recv() (*Ack, error) {
  m := new(Ack)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

// Server API for MessageWriter service
type MessageWriterServer interface {
  WriteMessage(MessageWriter_WriteMessageServer) error  
}

func RegisterMessageWriterServer(s *grpc.Server, srv MessageWriterServer) {
  s.RegisterService(&_MessageWriter_serviceDesc, srv)
}

func _MessageWriter_WriteMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
  return srv.(MessageWriterServer).WriteMessage(&messageWriterWriteMessageServer{stream})
}

type MessageWriter_WriteMessageServer interface { 
  Send(* flatbuffers.Builder) error
  Recv() (* Message, error)
  grpc.ServerStream
}

type messageWriterWriteMessageServer struct {
  grpc.ServerStream
}

func (x *messageWriterWriteMessageServer) Send(m *flatbuffers.Builder) error {
  return x.ServerStream.SendMsg(m)
}

func (x *messageWriterWriteMessageServer) Recv() (*Message, error) {
  m := new(Message)
  if err := x.ServerStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}


var _MessageWriter_serviceDesc = grpc.ServiceDesc{
  ServiceName: "msgflatbuf.MessageWriter",
  HandlerType: (*MessageWriterServer)(nil),
  Methods: []grpc.MethodDesc{
  },
  Streams: []grpc.StreamDesc{
    {
      StreamName: "WriteMessage",
      Handler: _MessageWriter_WriteMessage_Handler, 
      ServerStreams: true,
      ClientStreams: true,
    },
  },
}

