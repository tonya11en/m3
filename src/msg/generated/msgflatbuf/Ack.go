// Code generated by the FlatBuffers compiler. DO NOT EDIT.

// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package msgflatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Ack struct {
	_tab flatbuffers.Table
}

func GetRootAsAck(buf []byte, offset flatbuffers.UOffsetT) *Ack {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Ack{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Ack) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Ack) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Ack) Shard() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Ack) MutateShard(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Ack) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Ack) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Ack) SentAtNanos() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Ack) MutateSentAtNanos(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func AckStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AckAddShard(builder *flatbuffers.Builder, shard uint64) {
	builder.PrependUint64Slot(0, shard, 0)
}
func AckAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(1, id, 0)
}
func AckAddSentAtNanos(builder *flatbuffers.Builder, sentAtNanos uint64) {
	builder.PrependUint64Slot(2, sentAtNanos, 0)
}
func AckEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
