// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package msgflatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Ack struct {
	_tab flatbuffers.Table
}

func GetRootAsAck(buf []byte, offset flatbuffers.UOffsetT) *Ack {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Ack{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Ack) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Ack) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Ack) Shard() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Ack) MutateShard(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Ack) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Ack) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Ack) SentAtNanos() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Ack) MutateSentAtNanos(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func AckStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AckAddShard(builder *flatbuffers.Builder, shard uint64) {
	builder.PrependUint64Slot(0, shard, 0)
}
func AckAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(1, id, 0)
}
func AckAddSentAtNanos(builder *flatbuffers.Builder, sentAtNanos uint64) {
	builder.PrependUint64Slot(2, sentAtNanos, 0)
}
func AckEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
