// Message... TODO
 
namespace msgflatbuf;

union Metric { 
}

// The metric types below are flattened out as much as possible to make their creation easier.
// Nested tables not only incur a performance penalty, but are also quite verbose to create.

table Metric {
  id:[byte];
  annotation:[byte];
  type:int;
  time_nanos:long;
  value:double;

  // Storage policy.
  storage_policy_window:long;
  storage_policy_precision:ushort;
  storage_policy_retention:long;
}

table ChunkedMetric {
  id_prefix:[byte];
  id_data:[byte];
  id_suffix:[byte];
  annotation:[byte];
  time_nanos:long;
  value:double;

  // Storage policy.
  storage_policy_window:long;
  storage_policy_precision:ushort;
  storage_policy_retention:long;
}

table ForwardedMetric {
  id:[byte];
  values:[double];
  prev_values:[double];
  annotation:[byte]; 
  type:int;
  time_nanos:long;
  version:uint;

  // Metadata.
  aggregation_id:[ulong];
  num_forwarded_times:int;
  source_id:uint;
  resend_enabled:bool;

  // Storage policy.
  storage_policy_window:long;
  storage_policy_precision:ushort;
  storage_policy_retention:long;

  op_unions:[OpUnion];
}

struct OpUnion {
  rollup_op_id:[byte];
  rollup_op_aggregation_id:[ulong];
  type:int;
  transformation_op_type:int;
}

 
table Message {
  value:[byte];

  // We choose to embed the message metadata as flat fields in the message, rather than nesting
  // another table into the buffer.
  shard:ulong;
  id:ulong;
  sent_at_nanos:ulong;
}

// The protobuf version of this Ack has a repeated metadata field. However, this flatbuffer gRPC
// service id a bidirectional stream, so a single message may result in multiple streaming Acks.
// This is done to simplify the creation of the message flatbuffer.
table Ack {
  shard:ulong;
  id:ulong;
  sent_at_nanos:ulong;
}

rpc_service MessageWriter {
  WriteMessage(Message):Ack (streaming: "bidi");
}
 
root_type Message;