// Code generated by the FlatBuffers compiler. DO NOT EDIT.

// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package msgflatbuf

import "strconv"

type MessageValue byte

const (
	MessageValueNONE                              MessageValue = 0
	MessageValueMetric                            MessageValue = 1
	MessageValueChunkedMetric                     MessageValue = 2
	MessageValueAggregatedMetricWithStoragePolicy MessageValue = 3
	MessageValueChunkedMetricWithStoragePolicy    MessageValue = 4
	MessageValueForwardedMetricWithMetadata       MessageValue = 5
	MessageValueTimedMetricWithMetadata           MessageValue = 6
	MessageValueTimedMetricWithMetadatas          MessageValue = 7
	MessageValuePassthroughMetricWithMetadata     MessageValue = 8
	MessageValueCounterWithMetadatas              MessageValue = 9
	MessageValueGaugeWithMetadatas                MessageValue = 10
	MessageValueBatchTimerWithMetadatas           MessageValue = 11
)

var EnumNamesMessageValue = map[MessageValue]string{
	MessageValueNONE:                              "NONE",
	MessageValueMetric:                            "Metric",
	MessageValueChunkedMetric:                     "ChunkedMetric",
	MessageValueAggregatedMetricWithStoragePolicy: "AggregatedMetricWithStoragePolicy",
	MessageValueChunkedMetricWithStoragePolicy:    "ChunkedMetricWithStoragePolicy",
	MessageValueForwardedMetricWithMetadata:       "ForwardedMetricWithMetadata",
	MessageValueTimedMetricWithMetadata:           "TimedMetricWithMetadata",
	MessageValueTimedMetricWithMetadatas:          "TimedMetricWithMetadatas",
	MessageValuePassthroughMetricWithMetadata:     "PassthroughMetricWithMetadata",
	MessageValueCounterWithMetadatas:              "CounterWithMetadatas",
	MessageValueGaugeWithMetadatas:                "GaugeWithMetadatas",
	MessageValueBatchTimerWithMetadatas:           "BatchTimerWithMetadatas",
}

var EnumValuesMessageValue = map[string]MessageValue{
	"NONE":                              MessageValueNONE,
	"Metric":                            MessageValueMetric,
	"ChunkedMetric":                     MessageValueChunkedMetric,
	"AggregatedMetricWithStoragePolicy": MessageValueAggregatedMetricWithStoragePolicy,
	"ChunkedMetricWithStoragePolicy":    MessageValueChunkedMetricWithStoragePolicy,
	"ForwardedMetricWithMetadata":       MessageValueForwardedMetricWithMetadata,
	"TimedMetricWithMetadata":           MessageValueTimedMetricWithMetadata,
	"TimedMetricWithMetadatas":          MessageValueTimedMetricWithMetadatas,
	"PassthroughMetricWithMetadata":     MessageValuePassthroughMetricWithMetadata,
	"CounterWithMetadatas":              MessageValueCounterWithMetadatas,
	"GaugeWithMetadatas":                MessageValueGaugeWithMetadatas,
	"BatchTimerWithMetadatas":           MessageValueBatchTimerWithMetadatas,
}

func (v MessageValue) String() string {
	if s, ok := EnumNamesMessageValue[v]; ok {
		return s
	}
	return "MessageValue(" + strconv.FormatInt(int64(v), 10) + ")"
}
