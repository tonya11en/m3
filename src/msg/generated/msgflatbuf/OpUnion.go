// Code generated by the FlatBuffers compiler. DO NOT EDIT.

// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package msgflatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OpUnion struct {
	_tab flatbuffers.Table
}

func GetRootAsOpUnion(buf []byte, offset flatbuffers.UOffsetT) *OpUnion {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OpUnion{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *OpUnion) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OpUnion) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OpUnion) Rollup(obj *RollupOp) *RollupOp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RollupOp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *OpUnion) Type() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OpUnion) MutateType(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *OpUnion) Transformation(obj *TransformationOp) *TransformationOp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TransformationOp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func OpUnionStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func OpUnionAddRollup(builder *flatbuffers.Builder, rollup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(rollup), 0)
}
func OpUnionAddType(builder *flatbuffers.Builder, type_ int32) {
	builder.PrependInt32Slot(1, type_, 0)
}
func OpUnionAddTransformation(builder *flatbuffers.Builder, transformation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(transformation), 0)
}
func OpUnionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
